// <auto-generated />
using System;
using DiscordBot.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace DiscordBot.Infrastructure.Migrations
{
    [DbContext(typeof(BotContext))]
    [Migration("20230115123544_12")]
    partial class _12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.CustomMessageJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("CHANNEL_ID");

                    b.Property<decimal>("FromUser")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("FROM_USER");

                    b.Property<string>("FromUserNickname")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("FROM_USER_NICKNAME");

                    b.Property<string>("FromUsername")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("FROM_USERNAME");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MESSAGE");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<DateTime>("ScheduledTimestamp")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("SCHEDULED_TIMESTAMP");

                    b.Property<int>("Status")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("JOB_STATUS_ID");

                    b.Property<long?>("_allianceId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ALLIANCE_ID");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("_allianceId");

                    b.ToTable("CUSTOM_MESSAGE_JOBS", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.DirectMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CommonServers")
                        .HasMaxLength(4000)
                        .HasColumnType("NCLOB")
                        .HasColumnName("COMMON_SERVERS");

                    b.Property<decimal>("FromUser")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("FROM_USER");

                    b.Property<string>("Message")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("MESSAGE");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<DateTime>("ReceivedTimestamp")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("RECEIVED_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("DIRECT_MESSAGES", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("LABEL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("CT_JOB_STATUS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Label = "Unspecified",
                            Name = "Unspecified"
                        },
                        new
                        {
                            Id = 1,
                            Label = "Scheduled",
                            Name = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Cancelled",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Failed",
                            Name = "Failed"
                        });
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Nickname")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("NICKNAME");

                    b.Property<DateTime>("ReactionReceived")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("REACTION_RECEIVED");

                    b.Property<decimal>("UserId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("USERNAME");

                    b.Property<long>("_messageId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("MESSAGE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_messageId");

                    b.ToTable("REACT_MESSAGE_REACTIONS", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.ReactMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("CHANNEL_ID");

                    b.Property<decimal>("FromUserId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("FROM_USER_ID");

                    b.Property<string>("FromUsername")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("FROM_USERNAME");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("GUILD_ID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("NCLOB")
                        .HasColumnName("MESSAGE");

                    b.Property<decimal?>("MessageId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("DISCORD_MESSAGE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<DateTime?>("Posted")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("POSTED");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("RESPONSETEXT");

                    b.Property<long>("_allianceId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ALLIANCE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_allianceId");

                    b.ToTable("REACT_MESSAGES", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.Alliance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Acronym")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)")
                        .HasColumnName("ACRONYM");

                    b.Property<decimal?>("AlliedBroadcastRole")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("ALLIED_BROADCAST_ROLE");

                    b.Property<int?>("DefendBroadcastLeadTime")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DEFEND_BROADCAST_LEAD_TIME");

                    b.Property<bool?>("DefendBroadcastPingForLowRisk")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("DEFENDBROADCASTPINGFORLOWRISK");

                    b.Property<decimal?>("DefendBroadcastPingRole")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("DEFENDBROADCASTPINGROLE");

                    b.Property<decimal?>("DefendSchedulePostChannel")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("DEFEND_SCHEDULE_POST_CHANNEL");

                    b.Property<string>("DefendSchedulePostTime")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)")
                        .HasColumnName("DEFEND_SCHEDULE_POST_TIME");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("NUMBER(20)")
                        .HasColumnName("GUILD_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Name")
                        .HasMaxLength(2000)
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("NextScheduledPost")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("NEXT_SCHEDULED_POST");

                    b.Property<long?>("_allianceGroupId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ALLIANCE_GROUP_ID");

                    b.HasKey("Id");

                    b.HasIndex("_allianceGroupId");

                    b.ToTable("ALLIANCES", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.AllianceGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("ALLIANCE_GROUPS", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.Diplomacy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<long>("_ownerId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("OWNER_ID");

                    b.Property<long>("_relatedId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("RELATED_ID");

                    b.Property<int>("_relationshipId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RELATIONSHIP_ID");

                    b.HasKey("Id");

                    b.HasIndex("_ownerId");

                    b.HasIndex("_relatedId");

                    b.HasIndex("_relationshipId");

                    b.ToTable("ALLIANCE_DIPLOMACY", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.DiplomaticRelation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("CT_DIPLOMATIC_RELATION", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Unspecified"
                        },
                        new
                        {
                            Id = -99,
                            Name = "Enemy"
                        },
                        new
                        {
                            Id = -1,
                            Name = "Untrusted"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Neutral"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Friendly"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Allied"
                        });
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.AllianceService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<long?>("_allianceId")
                        .IsRequired()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ALLIANCE_ID");

                    b.Property<int?>("_allianceServiceLevelId")
                        .IsRequired()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("LEVEL_ID");

                    b.Property<long?>("_serviceId")
                        .IsRequired()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ZONE_SERVICE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_allianceId");

                    b.HasIndex("_allianceServiceLevelId");

                    b.HasIndex("_serviceId");

                    b.ToTable("ALLIANCE_SERVICES", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.AllianceServiceLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("LABEL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("CT_ALLIANCE_SERVICE_LEVEL", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Label = "Undefined",
                            Name = "Undefined"
                        },
                        new
                        {
                            Id = 1,
                            Label = "Disabled",
                            Name = "Disabled"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Redundant",
                            Name = "Redundant"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Desired",
                            Name = "Desired"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Preferred",
                            Name = "Preferred"
                        },
                        new
                        {
                            Id = 5,
                            Label = "Basic",
                            Name = "Basic"
                        });
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.Property<long?>("_zoneId")
                        .IsRequired()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ZONE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_zoneId");

                    b.ToTable("ZONE_SERVICES", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.ServiceCost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Cost")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("COST");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<int?>("_resourceId")
                        .IsRequired()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RESOURCE_ID");

                    b.Property<long?>("_serviceId")
                        .IsRequired()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("SERVICE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_resourceId");

                    b.HasIndex("_serviceId");

                    b.ToTable("ZONE_SERVICE_COST", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.Resource", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("LABEL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("CT_RESOURCES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Label = "Unspecified",
                            Name = "Unspecified"
                        },
                        new
                        {
                            Id = 1,
                            Label = "Parasteel",
                            Name = "Parasteel"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Tritanium",
                            Name = "Tritanium"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Dilithium",
                            Name = "Dilithium"
                        },
                        new
                        {
                            Id = 11,
                            Label = "Isogen Tier 1",
                            Name = "IsogenTier1"
                        },
                        new
                        {
                            Id = 12,
                            Label = "Isogen Tier 2",
                            Name = "IsogenTier2"
                        },
                        new
                        {
                            Id = 13,
                            Label = "Isogen Tier 3",
                            Name = "IsogenTier3"
                        },
                        new
                        {
                            Id = 23,
                            Label = "Gas Tier 3",
                            Name = "GasTier3"
                        },
                        new
                        {
                            Id = 24,
                            Label = "Gas Tier 4",
                            Name = "GasTier4"
                        },
                        new
                        {
                            Id = 33,
                            Label = "Crystal Tier 3",
                            Name = "CrystalTier3"
                        },
                        new
                        {
                            Id = 34,
                            Label = "Crystal Tier 4",
                            Name = "CrystalTier4"
                        },
                        new
                        {
                            Id = 43,
                            Label = "Ore Tier 3",
                            Name = "OreTier3"
                        },
                        new
                        {
                            Id = 44,
                            Label = "Ore Tier 4",
                            Name = "OreTier4"
                        },
                        new
                        {
                            Id = 51,
                            Label = "Refined Isogen Tier 1",
                            Name = "RefinedIsogenTier1"
                        },
                        new
                        {
                            Id = 52,
                            Label = "Refined Isogen Tier 2",
                            Name = "RefinedIsogenTier2"
                        },
                        new
                        {
                            Id = 53,
                            Label = "Refined Isogen Tier 3",
                            Name = "RefinedIsogenTier3"
                        },
                        new
                        {
                            Id = 61,
                            Label = "Progenitor Emitters",
                            Name = "ProgenitorEmitters"
                        },
                        new
                        {
                            Id = 62,
                            Label = "Progenitor Diodes",
                            Name = "ProgenitorDiodes"
                        },
                        new
                        {
                            Id = 63,
                            Label = "Progenitor Cores",
                            Name = "ProgenitorCores"
                        },
                        new
                        {
                            Id = 64,
                            Label = "Progenitor Reactors",
                            Name = "ProgenitorReactors"
                        },
                        new
                        {
                            Id = 71,
                            Label = "Collisional Plasma",
                            Name = "CollisionalPlasma"
                        },
                        new
                        {
                            Id = 72,
                            Label = "Magnetic Plasma",
                            Name = "MagneticPlasma"
                        },
                        new
                        {
                            Id = 73,
                            Label = "Subspace Superconductors",
                            Name = "SubspaceSuperconductor"
                        },
                        new
                        {
                            Id = 74,
                            Label = "Alliance Reserves",
                            Name = "AllianceReserves"
                        });
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.StarSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.Property<int?>("_resourceId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RESOURCE_ID");

                    b.Property<long?>("_zoneId")
                        .IsRequired()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ZONE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_resourceId");

                    b.HasIndex("_zoneId");

                    b.ToTable("STARSYSTEMS", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("DefendEasternDay")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DEFEND_EASTERN_DAY");

                    b.Property<string>("DefendEasternTime")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("DEFEND_EASTERN_TIME");

                    b.Property<string>("DefendUtcDayOfWeek")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("NVARCHAR2(15)")
                        .HasColumnName("DEFEND_DAY_OF_WEEK");

                    b.Property<string>("DefendUtcTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)")
                        .HasColumnName("DEFEND_UTC_TIME");

                    b.Property<int>("Level")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("LEVEL");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("NextDefend")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("NEXT_DEFEND");

                    b.Property<string>("Notes")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("NOTES");

                    b.Property<long?>("_ownerId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("OWNER_ID");

                    b.HasKey("Id");

                    b.HasIndex("_ownerId");

                    b.ToTable("ZONES", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.ZoneNeighbour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<long>("_fromZoneId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("FROM_ZONE_ID");

                    b.Property<long>("_toZoneId")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("TO_ZONE_ID");

                    b.HasKey("Id");

                    b.HasIndex("_fromZoneId");

                    b.HasIndex("_toZoneId");

                    b.ToTable("ZONE_NEIGHBOURS", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Infrastructure.Entities.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("AFFECTED_COLUMNS");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("DATE_TIME");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("MODIFIED_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("NewValues")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("NEW_VALUES");

                    b.Property<string>("OldValues")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("OLD_VALUES");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("PRIMARY_KEY");

                    b.Property<string>("TableName")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("TABLE_NAME");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("TYPE");

                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("AUDIT", (string)null);
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.CustomMessageJob", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Alliances.Alliance", "Alliance")
                        .WithMany()
                        .HasForeignKey("_allianceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Alliance");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.Reaction", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Admin.ReactMessage", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("_messageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.ReactMessage", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Alliances.Alliance", "Alliance")
                        .WithMany()
                        .HasForeignKey("_allianceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alliance");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.Alliance", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Alliances.AllianceGroup", "Group")
                        .WithMany("Alliances")
                        .HasForeignKey("_allianceGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.Diplomacy", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Alliances.Alliance", "Owner")
                        .WithMany("AssignedDiplomacy")
                        .HasForeignKey("_ownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domain.Entities.Alliances.Alliance", "Related")
                        .WithMany("ReceivedDiplomacy")
                        .HasForeignKey("_relatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domain.Entities.Alliances.DiplomaticRelation", "Relationship")
                        .WithMany()
                        .HasForeignKey("_relationshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Related");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.AllianceService", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Alliances.Alliance", "Alliance")
                        .WithMany("AllianceServices")
                        .HasForeignKey("_allianceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domain.Entities.Services.AllianceServiceLevel", "AllianceServiceLevel")
                        .WithMany()
                        .HasForeignKey("_allianceServiceLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domain.Entities.Services.Service", "Service")
                        .WithMany("AllianceServices")
                        .HasForeignKey("_serviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("AllianceServiceLevel");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.Service", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Zones.Zone", "Zone")
                        .WithMany("Services")
                        .HasForeignKey("_zoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.ServiceCost", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Zones.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("_resourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domain.Entities.Services.Service", "Service")
                        .WithMany("Costs")
                        .HasForeignKey("_serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.StarSystem", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Zones.Resource", null)
                        .WithMany()
                        .HasForeignKey("_resourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DiscordBot.Domain.Entities.Zones.Zone", "Zone")
                        .WithMany("StarSystems")
                        .HasForeignKey("_zoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.Zone", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Alliances.Alliance", "Owner")
                        .WithMany("Zones")
                        .HasForeignKey("_ownerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.ZoneNeighbour", b =>
                {
                    b.HasOne("DiscordBot.Domain.Entities.Zones.Zone", "FromZone")
                        .WithMany("ZoneNeighbours")
                        .HasForeignKey("_fromZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiscordBot.Domain.Entities.Zones.Zone", "ToZone")
                        .WithMany()
                        .HasForeignKey("_toZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromZone");

                    b.Navigation("ToZone");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Admin.ReactMessage", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.Alliance", b =>
                {
                    b.Navigation("AllianceServices");

                    b.Navigation("AssignedDiplomacy");

                    b.Navigation("ReceivedDiplomacy");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Alliances.AllianceGroup", b =>
                {
                    b.Navigation("Alliances");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Services.Service", b =>
                {
                    b.Navigation("AllianceServices");

                    b.Navigation("Costs");
                });

            modelBuilder.Entity("DiscordBot.Domain.Entities.Zones.Zone", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("StarSystems");

                    b.Navigation("ZoneNeighbours");
                });
#pragma warning restore 612, 618
        }
    }
}
