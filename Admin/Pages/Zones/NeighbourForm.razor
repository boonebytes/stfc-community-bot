@namespace DiscordBot.AdminWeb.Pages.Zones
@using DiscordBot.Domain.Entities.Zones
@using DiscordBot.Domain.Entities.Alliances
@inject IZoneRepository zoneRepository
@inject IAllianceRepository allianceRepository

@if (IsVisible)
{
    <div class="modal" tabindex="-1" style="display: block" role="dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Zone Information</h5>
            </div>

        <EditForm Model=@ZoneObj OnSubmit=@OnSubmit>
            <div class="modal-body">
                <table width="100%">
                    <tr>
                        <td>Id:</td>
                        <td>@ZoneObj.Id</td>
                    </tr>
                    <tr>
                        <td>Name:</td>
                        <td><InputText @bind-Value=ZoneObj.Name style="width:100%;" /></td>
                    </tr>
                    <tr>
                        <td>Level:</td>
                        <td><InputNumber @bind-Value=ZoneObj.Level ParsingErrorMessage="Must be a number" /></td>
                    </tr>
                    <tr>
                        <td>Defend UTC Day:</td>
                        <td>
                            <InputSelect @bind-Value="ZoneObj.DefendUtcDayOfWeek">
                                @for (var i = 0; i < 7; i++)
                                {
                                    DayOfWeek dow = (DayOfWeek)i;
                                    <option value="@dow">@dow</option>
                                }
                            </InputSelect>
                        </td>
                    </tr>
                    <tr>
                        <td>Defend UTC Time:</td>
                        <td><InputText @bind-Value="ZoneObj.DefendUtcTime" /></td>
                    </tr>
                    <tr>
                        <td>Owner:</td>
                        <td>
                            <InputSelect @bind-Value=ZoneObj.OwnerId>
                                <option value="">Unclaimed</option>
                                @foreach (var value in ZoneObj.Alliances)
                                    {
                                    <option value="@value.Id">@value.Acronym - @value.Name</option>
                                    }
                            </InputSelect>
                        </td>
                    </tr>
                    <tr>
                        <td>Threats:</td>
                        <td><InputText @bind-Value="ZoneObj.Threats" /></td>
                    </tr>
                    <tr>
                        <td>Notes:</td>
                        <td><textarea rows="5" @bind="ZoneObj.Notes" style="width:100%;"></textarea></td>
                    </tr>
                </table>

            </div>
                
            <div class="modal-footer">
                <input type="submit" value="Ok" class="btn btn-primary" />
                <input type="button" value="Cancel" class="btn btn-secondary" @onclick="OnCancel" />
            </div>
            </EditForm>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Visible flag
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; } = false;

    /// <summary>
    /// Creating or Editing flag
    /// </summary>
    [Parameter]
    public Modes Mode { get; set; } = Modes.Edit;
    public void SetMode(Modes mode)
    {
        Mode = mode;
    }

    /// <summary>
    /// Zone object bound to form
    /// </summary>
    [Parameter]
    public ZoneViewModel ZoneObj { get; set; }
    public async Task SetZone(Zone zone)
    {
        ZoneObj = AdminMapper.GetMapper().Map<ZoneViewModel>(zone);
        ZoneObj.Alliances = (await allianceRepository.GetAllAsync()).ToList();
    }

    public enum Modes { Edit, Create };

    public void Show()
    {
        IsVisible = true;
        //StateHasChanged();
        //InvokeAsync(() => StateHasChanged());
    }
    public void Hide()
    {
        IsVisible = false;
        //InvokeAsync(() => StateHasChanged());
        //StateHasChanged();
    }

    /// <summary>
    /// Callback event to return submit information to parent page
    /// </summary>
    [Parameter]
    public EventCallback<EventArgs> OnSubmitCallback { get; set; }

    private void OnSubmit()
    {
        if (ZoneObj.OwnerId.HasValue)
        {
            ZoneObj.Owner = ZoneObj.Alliances.Where(a => a.Id == ZoneObj.OwnerId.Value).First();
        }
        else
        {
            ZoneObj.Owner = null;
        }

        Hide();

        if (OnSubmitCallback.HasDelegate)
            OnSubmitCallback.InvokeAsync(null);
    }

    private void OnCancel()
    {
        Hide();
    }
}
